const express = require('express');
const session = require('express-session');
const bodyParser = require('body-parser');
const { Pool } = require('pg');
const path = require('path');

const app = express();
const port = 3000;

// Database connection setup
const pool = new Pool({
  user: 'postgres', // Replace with your DB user
  host: 'localhost',
  database: 'sportscheduler', // Your database name
  password: 'password', // Replace with your DB password
  port: 5432,
});

// Middlewares
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Session setup
app.use(session({
  secret: 'secret',  // Change to a more secure secret
  resave: false,
  saveUninitialized: true,
}));

// Middleware to check if user is logged in (replace with actual authentication)
function isAuthenticated(req, res, next) {
  if (req.session.user) {
    return next();
  } else {
    res.redirect('/login');
  }
}

// Routes
// Admin Dashboard Route
app.get('/admin-dashboard', isAuthenticated, async (req, res) => {
  try {
    // Get sports data from the database
    const sportsResult = await pool.query('SELECT * FROM sports');
    const sports = sportsResult.rows;

    // Get sessions data from the database
    const sessionsResult = await pool.query('SELECT * FROM sessions');
    const sessions = sessionsResult.rows;

    // Render the dashboard page
    res.render('admin-dashboard', { user: req.session.user, sports, sessions });
  } catch (error) {
    console.error('Error fetching sports and sessions:', error);
    res.status(500).send('Internal Server Error');
  }
});

// Create Sport
app.post('/create-sport', isAuthenticated, async (req, res) => {
  try {
    const { name } = req.body;
    await pool.query('INSERT INTO sports (name) VALUES ($1)', [name]);
    res.redirect('/admin-dashboard');
  } catch (error) {
    console.error('Error creating sport:', error);
    res.status(500).send('Internal Server Error');
  }
});

// Create Session
app.post('/create-session', isAuthenticated, async (req, res) => {
  try {
    const { sport_id, team1, team2, date, venue } = req.body;
    const creator_name = req.session.user.name; // Get creator's name from session

    await pool.query(
      'INSERT INTO sessions (sport_id, team1, team2, date, venue, creator_name) VALUES ($1, $2, $3, $4, $5, $6)',
      [sport_id, team1, team2, date, venue, creator_name]
    );
    res.redirect('/admin-dashboard');
  } catch (error) {
    console.error('Error creating session:', error);
    res.status(500).send('Internal Server Error');
  }
});

// Delete Sport
app.post('/delete-sport/:id', isAuthenticated, async (req, res) => {
  try {
    const { id } = req.params;
    await pool.query('DELETE FROM sports WHERE id = $1', [id]);
    res.redirect('/admin-dashboard');
  } catch (error) {
    console.error('Error deleting sport:', error);
    res.status(500).send('Internal Server Error');
  }
});

// Delete Session
app.post('/delete-session/:id', isAuthenticated, async (req, res) => {
  try {
    const { id } = req.params;
    await pool.query('DELETE FROM sessions WHERE id = $1', [id]);
    res.redirect('/admin-dashboard');
  } catch (error) {
    console.error('Error deleting session:', error);
    res.status(500).send('Internal Server Error');
  }
});

// Login Route (for simplicity, it's just a mock)
app.get('/login', (req, res) => {
  res.render('login');
});

app.post('/login', (req, res) => {
  const { username, password } = req.body;

  // Replace with actual authentication logic
  if (username === 'admin' && password === 'admin') {
    req.session.user = { name: 'Admin', role: 'admin' }; // Example user session
    res.redirect('/admin-dashboard');
  } else {
    res.send('Invalid credentials');
  }
});

// Logout Route
app.get('/logout', (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      return res.redirect('/admin-dashboard');
    }
    res.redirect('/login');
  });
});

// Starting the server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});